version: "1.0"
name: Swagger Petstore - OpenAPI 3.0
config:
  http:
    baseURL: https://petstore3.swagger.io/api/v3
tests:
  pet:
    name: Everything about your Pets
    steps:
      - id: updatePet
        name: Update an existing pet
        http:
          url: /pet
          method: PUT
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            name: minim est adipisicing veniam
            photoUrls:
              - laborum
              - ea enim est labore
            status: pending
            category:
              id: -98117875
              name: esse cillum quis consectetur
              aute7: 27090243.68842186
              dolord: true
              voluptate_2: 90705256
              sunt99: esse
            id: -98144057
            tags:
              - name: id in
                id: 73710256
                enime: -61841021.55850129
                sit_3: -24389427
                culpae: true
                do_83a: 46955214.32871276
              - id: -7182710
                name: ut
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Pet"
      - id: addPet
        name: Add a new pet to the store
        http:
          url: /pet
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            name: laborum
            photoUrls:
              - esse ullamco exercitation dolor incididunt
              - dolore
            id: -59014019
            status: pending
            tags:
              - name: esse
                id: -72020046
            category:
              name: dolore aliqua in
              id: 70125795
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Pet"
      - id: findPetsByStatus
        name: Finds Pets by status
        http:
          url: /pet/findByStatus
          method: GET
          params:
            status: available
          check:
            status: 200
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Pet"
      - id: findPetsByTags
        name: Finds Pets by tags
        http:
          url: /pet/findByTags
          method: GET
          params:
            tags:
              - ipsum eiusmod consectetur Duis in
              - dolor cillum nisi est
              - magna aliqua sed
              - deserunt sed id velit fugiat
              - minim do elit non voluptate
          check:
            status: 200
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Pet"
      - id: getPetById
        name: Find pet by ID
        http:
          url: /pet/49049024
          method: GET
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Pet"
      - id: updatePetWithForm
        name: Updates a pet in the store with form data
        http:
          url: /pet/-68513437
          method: POST
          params:
            name: sunt
            status: culpa irure aliqua dolor
      - id: deletePet
        name: Deletes a pet
        http:
          url: /pet/-38238761
          method: DELETE
          headers:
            api_key: elit aute
      - id: uploadFile
        name: uploads an image
        http:
          url: /pet/49446883/uploadImage
          method: POST
          params:
            additionalMetadata: exercitation reprehenderit
          headers:
            Content-Type: application/octet-stream
          body:
            file: file.txt
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/ApiResponse"
  store:
    name: Access to Petstore orders
    steps:
      - id: getInventory
        name: Returns pet inventories by status
        http:
          url: /store/inventory
          method: GET
          check:
            status: 200
            schema:
              type: object
              additionalProperties:
                type: integer
                format: int32
      - id: placeOrder
        name: Place an order for a pet
        http:
          url: /store/order
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            complete: false
            reprehenderitaae: -62413570
            exc6: eiusmod culpa in
            adipisicing_8: false
            consequat_5e_: -68674221
            elitc_d: false
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Order"
      - id: getOrderById
        name: Find purchase order by ID
        http:
          url: /store/order/75404248
          method: GET
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/Order"
      - id: deleteOrder
        name: Delete purchase order by ID
        http:
          url: /store/order/-44902799
          method: DELETE
  user:
    name: Operations about user
    steps:
      - id: createUser
        name: Create user
        http:
          url: /user
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            password: adipisicing amet exercitation
            firstName: aliquip do dolore
            userStatus: 24157565
      - id: createUsersWithListInput
        name: Creates list of users with given input array
        http:
          url: /user/createWithList
          method: POST
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            - username: Excepteur mollit non elit cupidatat
              userStatus: -7923565
              firstName: laborum
              id: 18242688
              password: officia in dolor amet
              sunt2: -78533802.44547302
              dolor_5: 98516407.65236458
              ut_c: -23002509.129748955
              officia_2fa: id non veniam aliqua ea
              qui5d: enim dolor irure
            - firstName: Duis ut sed minim elit
              username: consequat consectetur
              id: 2155777
              phone: occaecat pariatur tempor laboris proident
              userStatus: -73798254
            - irure_61f: false
              mollit11: 58852067
              magna4b: 94205981.94698599
              veniamb08: -33009007.659527615
              voluptatec: 25137065
              ipsuma98: true
              minim_f: laborum officia non do sit
              dolor_ef9: -18800360
            - email: Ut
              lastName: irure
              password: labore adipisicing aliqua quis
              firstName: ad pariatur eiusmod minim
              userStatus: -5207229
              phone: magna velit nostrud
              username: ut aute cillum minim ullamco
              id: 65510901
              in9ac: voluptate eiusmod consectetur in
              aliquip_c: incididunt mollit dolore consequat
              dolore107: true
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/User"
      - id: loginUser
        name: Logs user into the system
        http:
          url: /user/login
          method: GET
          params:
            username: sit minim
            password: amet occaecat
          check:
            status: 200
            schema:
              type: string
      - id: logoutUser
        name: Logs out current logged in user session
        http:
          url: /user/logout
          method: GET
      - id: getUserByName
        name: Get user by user name
        http:
          url: /user/deserunt nostrud est
          method: GET
          check:
            status: 200
            schema:
              $ref: "#/components/schemas/User"
      - id: updateUser
        name: Update user
        http:
          url: /user/sunt est in
          method: PUT
          headers:
            Content-Type: application/json
            accept: application/json
          json:
            email: enim ea cupidatat sed
            username: consequat in amet Lorem
            phone: in non
            userStatus: 39949713
            password: aliquip dolor cillum magna
      - id: deleteUser
        name: Delete user
        http:
          url: /user/Duis Lorem ipsum ut dolor
          method: DELETE
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: "#/components/schemas/Address"
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: "#/components/schemas/Category"
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: "##default"
